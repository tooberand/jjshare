#!/usr/local/bin/perl -w

use strict;

use Data::Dumper;
use File::Find;
use Getopt::Long;

main();

sub main
{
	Getopt::Long::Configure(qw(pass_through bundling));
	my $start_time = 0;
	my $no_countdown;
	my $countdown;
	my $start_volume =
		`osascript -e 'get output volume of (get volume settings)'`;
	chomp $start_volume;
	my $volume = $start_volume;
	# afplay args: vhtrqd
	GetOptions("start|s=i" => \$start_time);
	GetOptions("volume|v=i" => \$volume);
	GetOptions("CountdownOff|C" => \$no_countdown);
	GetOptions("countdown|c" => \$countdown);

	$SIG{'INT'} = sub
	{
		if ($start_volume != $volume)
		{
			esystem("osascript -e 'set volume output volume $start_volume'");
		}
		exit;
	};

	my $search_str = pop @ARGV;
	$search_str =~ s/\+/\.\*/g;
	my @matched_files;

	my $wanted = sub
	{
		push(@matched_files, $File::Find::name)
			if ($File::Find::name =~ /$search_str/i);
	};

	find($wanted, "$ENV{HOME}/Music/iTunes");
	if (@matched_files == 1)
	{
		if ($start_volume != $volume)
		{
			esystem("osascript -e 'set volume output volume $volume'");
		}

		my $countdown_default = $ENV{HOME} !~ /ew/;
		$countdown = $countdown // $countdown_default;
		$countdown = undef if defined $no_countdown;
		if ($countdown)
		{
			my $countdown = 3;
			while ($countdown)
			{
				print $countdown-- . "\n";
				sleep 1;
			}
		}

		my $file = $matched_files[0];
		if ($start_time)
		{
			my $d = qx"afinfo '$file'";
			print "$d";
			$d =~ /estimated duration: ([\d\.]+) sec/ || die;
			my $cutoff = $1;
			$d =~ /audio data file offset: (\d+)/ || die;
			my $offset = $1;

			my $cutoff_pct = $start_time / $cutoff;
			open(my $fh, "<$file") || die;
			undef $/;
			my $text = <$fh>;
			close($fh);
			print "Linitial ", length($text), "\n";
			substr($text, 0, $offset + int($cutoff_pct * length($text))) = "";
			print "Lcut ", length($text), "\n";
			my $tfile = "/tmp/jjplay.tmp.mp3";
			open(my $ofh, ">$tfile") || die;
			print $ofh $text;
			close($ofh);
			$file = $tfile;
		}
		esystem("afplay", @ARGV, $file);

		if ($start_volume != $volume)
		{
			esystem("osascript -e 'set volume output volume $start_volume'");
		}
	}
	else
	{
		if (@matched_files > 10)
		{
			print "ERROR: " . @matched_files . " matched files, truncating\n";
			@matched_files = @matched_files[0..9];
		}
		print Dumper \@matched_files;
	}
}


sub esystem
{
	my (@cmd) = @_;
	print "@cmd\n";
	system(@cmd);
}
